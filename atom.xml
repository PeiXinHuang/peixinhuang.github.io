<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PeiXinHuang</title>
  
  
  <link href="https://peixinhuang.github.io/atom.xml" rel="self"/>
  
  <link href="https://peixinhuang.github.io/"/>
  <updated>2022-07-31T10:35:04.021Z</updated>
  <id>https://peixinhuang.github.io/</id>
  
  <author>
    <name>沛大鑫</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unity实现不规则按钮</title>
    <link href="https://peixinhuang.github.io/2022/07/30/Unity/Unity%E5%AE%9E%E7%8E%B0%E4%B8%8D%E8%A7%84%E5%88%99%E6%8C%89%E9%92%AE/"/>
    <id>https://peixinhuang.github.io/2022/07/30/Unity/Unity%E5%AE%9E%E7%8E%B0%E4%B8%8D%E8%A7%84%E5%88%99%E6%8C%89%E9%92%AE/</id>
    <published>2022-07-30T12:38:39.000Z</published>
    <updated>2022-07-31T10:35:04.021Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h3><p>Unity开发过程中经常需要设置组件的RayCast区域来确定按钮的点击范围，但是有时候会有不规则按钮点击的需要，这里提供三种解决方案</p><span id="more"></span><h4 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a>方案一：</h4><p>使用带透明通道的图片作为按钮的Raycast组件，再通过图片组件的最小透明度点击投射值，可以实现按钮内alpha值小于一定值不响应点击事件，但是必须打开图片的Read/Write Enabled值，但是会造成贴图会在内存中被保留两份。一份在GPU显存中，一份在CPU可寻址内存中，如果有多个不规则按钮的话，对软件性能有一定的影响。注意，读取的透明通道值是图片的值，与Image的color属性无关。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Events;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Sctipt1</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Button btn;</span><br><span class="line">    <span class="keyword">public</span> Image img;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        img.alphaHitTestMinimumThreshold = <span class="number">0.1f</span>;  <span class="comment">//设置图片组件的最小透明度点击投射值</span></span><br><span class="line">        btn.onClick.AddListener(()=&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;Click Button&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h4><p>新建一个类继承自Image组件。为物体创建一个可编辑的PolygonCollider2D组件，自定义编辑PolygonCollider2D形状,如下图，作为设置按钮的可触碰区域。在新建类里重写IsRaycastLocationValid函数来确定点击的区域是否在PolygonCollider2D内部来确定是否触发点击事件。相比方案一，可编辑性更强，也不需要开启图片的Read/Write Enabled值。</p><img src="/.io//07/30/Unity/Unity%E5%AE%9E%E7%8E%B0%E4%B8%8D%E8%A7%84%E5%88%99%E6%8C%89%E9%92%AE/01.png" class width="01"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">[<span class="meta">RequireComponent(typeof(PolygonCollider2D))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomRayCast</span> : <span class="title">Image</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> PolygonCollider2D areaPolygon;</span><br><span class="line">    <span class="keyword">private</span> PolygonCollider2D Polygon</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (areaPolygon != <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> areaPolygon;</span><br><span class="line">            areaPolygon = GetComponent&lt;PolygonCollider2D&gt;();</span><br><span class="line">            <span class="keyword">return</span> areaPolygon;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">CustomRayCast</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        useLegacyMeshGeneration = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不需要绘制图片</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnPopulateMesh</span>(<span class="params">VertexHelper vh</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        vh.Clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写点击组件点击监测</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">IsRaycastLocationValid</span>(<span class="params">Vector2 screenPoint, Camera eventCamera</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//对于Canvas RenderMode 为Camera可以使用这个方法</span></span><br><span class="line">        <span class="keyword">return</span> Polygon.OverlapPoint(eventCamera.ScreenToWorldPoint(screenPoint));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//对于Canvas RenderMode 为Overlay，eventCamera为NULL，不可以使用上述那个函数，改为下面的方法来设置</span></span><br><span class="line">        <span class="comment">//Vector3 point;</span></span><br><span class="line">        <span class="comment">//RectTransformUtility.ScreenPointToWorldPointInRectangle(rectTransform, screenPoint, eventCamera, out point);</span></span><br><span class="line">        <span class="comment">//return Polygon.OverlapPoint(point);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line">[<span class="meta">CustomEditor(typeof(CustomRayCast), true)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomRayCastInspector</span> : <span class="title">Editor</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//清除不需要的组件设置Inspector界面</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnInspectorGUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h4 id="方案三："><a href="#方案三：" class="headerlink" title="方案三："></a>方案三：</h4><p>设置一张图片，然后根据鼠标点击位置，找到图片上对应的像素点位置，来执行对应的函数或者不执行函数，间接实现不规则按钮，好处是，只需要读取一张打开Read/Write Enabled值的图片，可以多个不规则按钮使用同一张图</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GetPixel</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Texture2D texture;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetPixelInfo</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Vector2 pos = Input.mousePosition;</span><br><span class="line">        Vector2 pixPos = <span class="keyword">new</span> Vector2(pos.x * <span class="number">1.0f</span> / Screen.width, pos.y * <span class="number">1.0f</span> / Screen.height);</span><br><span class="line">Color color = texture.GetPixelBilinear(pixPos.x, pixPos.y);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//根据color值进行不同处理...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考文章：</p><p><a href="http://www.xuanyusong.com/archives/3492">UGUI研究院之不规则按钮的响应区域（十四）—— 雨松</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;需求：&quot;&gt;&lt;a href=&quot;#需求：&quot; class=&quot;headerlink&quot; title=&quot;需求：&quot;&gt;&lt;/a&gt;需求：&lt;/h3&gt;&lt;p&gt;Unity开发过程中经常需要设置组件的RayCast区域来确定按钮的点击范围，但是有时候会有不规则按钮点击的需要，这里提供三种解决方案&lt;/p&gt;</summary>
    
    
    
    <category term="Unity" scheme="https://peixinhuang.github.io/categories/Unity/"/>
    
    <category term="UGUI" scheme="https://peixinhuang.github.io/categories/Unity/UGUI/"/>
    
    <category term="Tip" scheme="https://peixinhuang.github.io/categories/Unity/UGUI/Tip/"/>
    
    
    <category term="计算机系统" scheme="https://peixinhuang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="UGUI" scheme="https://peixinhuang.github.io/tags/UGUI/"/>
    
    <category term="Tip" scheme="https://peixinhuang.github.io/tags/Tip/"/>
    
  </entry>
  
  <entry>
    <title>Lua基础</title>
    <link href="https://peixinhuang.github.io/2022/07/17/%E7%BC%96%E7%A8%8B/Lua/Lua%E5%9F%BA%E7%A1%80/"/>
    <id>https://peixinhuang.github.io/2022/07/17/%E7%BC%96%E7%A8%8B/Lua/Lua%E5%9F%BA%E7%A1%80/</id>
    <published>2022-07-17T15:46:49.000Z</published>
    <updated>2022-07-17T15:56:28.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><blockquote><ul><li><p>Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能</p></li><li><p>Lua的特点</p><ul><li>轻量级</li><li>可扩展</li><li>其他特性<ul><li>支持面向过程编程和函数式编程<span id="more"></span></li><li>自动内存管理；只提供了一种通用类型的表，用它可以实现数组，哈希表，集合，对象；</li><li>语言内置模式匹配；闭包；函数也可以看做一个值；提供多线程（协同进程，并非操作系统所支持的线程）支持；</li><li>通过闭包和table可以很方便地支持面向对象编程所需要的一些关键机制，比如数据抽象，虚函数，继承和重载等。</li></ul></li></ul></li><li><p>Lua应用场景</p><ul><li>游戏开发</li><li>独立应用脚本</li><li>Web 应用脚本</li><li>扩展和数据库插件如：MySQL Proxy 和 MySQL WorkBench</li><li>安全系统，如入侵检测系统</li></ul></li></ul></blockquote><h1 id="Lua语法"><a href="#Lua语法" class="headerlink" title="Lua语法"></a>Lua语法</h1><blockquote><ul><li>单行注释 –</li><li>多行注释 –[[–]]</li></ul></blockquote><h1 id="Lua数据类型"><a href="#Lua数据类型" class="headerlink" title="Lua数据类型"></a>Lua数据类型</h1><table><thead><tr><th><strong>数据类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>nil</td><td>只有值nil属于该类，表示一个无效值（在条件表达式中相当于false）</td></tr><tr><td>boolean</td><td>包含两个值：false和true。</td></tr><tr><td>number</td><td>表示双精度类型的实浮点数</td></tr><tr><td>string</td><td>字符串由一对双引号或单引号来表示</td></tr><tr><td>function</td><td>由 C 或 Lua 编写的函数</td></tr><tr><td>userdata</td><td>表示任意存储在变量中的C数据结构</td></tr><tr><td>thread</td><td>表示执行的独立线路，用于执行协同程序</td></tr><tr><td>table</td><td>Lua 中的表（table）其实是一个”关联数组”（associative arrays），数组的索引可以是数字、字符串或表类型。在 Lua 里，table 的创建是通过”构造表达式”来完成，最简单构造表达式是{}，用来创建一个空表。</td></tr></tbody></table><h1 id="Lua变量"><a href="#Lua变量" class="headerlink" title="Lua变量"></a>Lua变量</h1><blockquote><ul><li>局部变量 local声明 作用域从声明位置到所在到语句块结束</li><li>全局变量</li></ul></blockquote><h1 id="Lua循环"><a href="#Lua循环" class="headerlink" title="Lua循环"></a>Lua循环</h1><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- while循环</span></span><br><span class="line"><span class="keyword">while</span>(condition)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    statements</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- for循环</span></span><br><span class="line"><span class="keyword">for</span> var=exp1,exp2,exp3 <span class="keyword">do</span></span><br><span class="line">    statements</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- repeat..unitl循环</span></span><br><span class="line"><span class="keyword">repeat</span></span><br><span class="line">    statements</span><br><span class="line">unitl(condition)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">-- break</span></span><br><span class="line"><span class="comment">-- goto</span></span><br></pre></td></tr></table></figure><h1 id="Lua流程控制"><a href="#Lua流程控制" class="headerlink" title="Lua流程控制"></a>Lua流程控制</h1><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition) <span class="comment">--if语句</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="keyword">do</span> something</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(condition) <span class="comment">-- if..else语句</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="keyword">do</span> something</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">do</span> something</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">            </span><br><span class="line"><span class="keyword">if</span>(condition1) <span class="keyword">then</span> <span class="keyword">do</span> something</span><br><span class="line"><span class="keyword">elseif</span>(condition2) <span class="keyword">then</span> <span class="keyword">do</span> something</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">do</span> something</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">                </span><br></pre></td></tr></table></figure><h1 id="Lua函数"><a href="#Lua函数" class="headerlink" title="Lua函数"></a>Lua函数</h1><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Lua 编程语言函数定义格式如下：</span></span><br><span class="line"></span><br><span class="line">optional_function_scope <span class="function"><span class="keyword">function</span> <span class="title">function_name</span><span class="params">( argument1, argument2, argument3..., argumentn)</span></span></span><br><span class="line">    function_body</span><br><span class="line">    <span class="keyword">return</span> result_params_comma_separated</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 解析：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- optional_function_scope: 该参数是可选的制定函数是全局函数还是局部函数，未设置该参数默认为全局函数，如果你需要设置函数为局部函数需要使用关键字 local。</span></span><br><span class="line"><span class="comment">-- function_name: 指定函数名称。</span></span><br><span class="line"><span class="comment">-- argument1, argument2, argument3..., argumentn: 函数参数，多个参数以逗号隔开，函数也可以不带参数。</span></span><br><span class="line"><span class="comment">-- function_body: 函数体，函数中需要执行的代码语句块。</span></span><br><span class="line"><span class="comment">-- result_params_comma_separated: 函数返回值，Lua语言函数可以返回多个值，每个值以逗号隔开。</span></span><br></pre></td></tr></table></figure><h1 id="Lua运算符"><a href="#Lua运算符" class="headerlink" title="Lua运算符"></a>Lua运算符</h1><blockquote><ul><li>算术运算符 + - * / ^ %</li><li>关系运算符 ==  ~=  &gt;  &lt; &gt;= &lt;=</li><li>逻辑运算符 and or not</li><li>其他运算符 .. (连接字符串)    # （返回字符串长度或表的长度）</li></ul></blockquote><h1 id="Lua字符串"><a href="#Lua字符串" class="headerlink" title="Lua字符串"></a>Lua字符串</h1><blockquote><p><strong>Lua 语言中字符串可以使用以下三种方式来表示：</strong></p><ul><li>单引号间的一串字符。 “Lua”</li><li>双引号间的一串字符。 ‘Lua’</li><li><strong>[[</strong> 与 <strong>]]</strong> 间的一串字符。 [[Lua]]</li></ul></blockquote><h1 id="Lua数组"><a href="#Lua数组" class="headerlink" title="Lua数组"></a>Lua数组</h1><blockquote><ul><li>一维数组</li><li>多维数组</li></ul></blockquote><h1 id="Lua迭代器"><a href="#Lua迭代器" class="headerlink" title="Lua迭代器"></a>Lua迭代器</h1><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 泛型for迭代器</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(t) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k,v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 无状态迭代器</span></span><br><span class="line"><span class="comment">-- 多状态迭代器</span></span><br></pre></td></tr></table></figure><h1 id="Lua-table"><a href="#Lua-table" class="headerlink" title="Lua table"></a>Lua table</h1><h1 id="Lua-模块与包"><a href="#Lua-模块与包" class="headerlink" title="Lua 模块与包"></a>Lua 模块与包</h1><h1 id="Lua元表"><a href="#Lua元表" class="headerlink" title="Lua元表"></a>Lua元表</h1><h1 id="Lua协同程序"><a href="#Lua协同程序" class="headerlink" title="Lua协同程序"></a>Lua协同程序</h1><h1 id="Lua文件I-O"><a href="#Lua文件I-O" class="headerlink" title="Lua文件I/O"></a>Lua文件I/O</h1><h1 id="Lua错误处理"><a href="#Lua错误处理" class="headerlink" title="Lua错误处理"></a>Lua错误处理</h1>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lua的特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;轻量级&lt;/li&gt;
&lt;li&gt;可扩展&lt;/li&gt;
&lt;li&gt;其他特性&lt;ul&gt;
&lt;li&gt;支持面向过程编程和函数式编程</summary>
    
    
    
    <category term="编程" scheme="https://peixinhuang.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Lua" scheme="https://peixinhuang.github.io/categories/%E7%BC%96%E7%A8%8B/Lua/"/>
    
    
    <category term="Lua" scheme="https://peixinhuang.github.io/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>计算机系统</title>
    <link href="https://peixinhuang.github.io/2022/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>https://peixinhuang.github.io/2022/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-07-17T10:38:39.000Z</published>
    <updated>2022-07-17T16:06:41.212Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、计算机系统概述"><a href="#一、计算机系统概述" class="headerlink" title="一、计算机系统概述"></a>一、计算机系统概述</h3><p>计算机只是一个电子器件，它只能根据用户的知道来完成任务。<br>计算机系统是一个庞大的系统，我们可以抽象地去了解整个系统，通常我们可以把它视为一个图灵机(图灵机是一个黑盒，只需要用户输入操作，在图灵机中完成操作，最后输出结果)，经常我们不需要理解图灵机内部是如何实现。计算机也可以视为是一个通用图灵机（一个可通过编程模式实现任意图灵机的图灵机）。</p><span id="more"></span><p>计算机系统包括软件与硬件，通常软件与硬件是相辅相成的，软件的速度提升依赖于硬件的相关特性，硬件的提升需要了解软件的相关性能。<br>计算机生产出来的目的是为了解决我们生活中的问题，但是计算机只要一堆冰凉的硬件，如何让冰凉的硬件去解决问题。一般会有一系列的装转过程，这个过程为：<br>问题 =&gt; 算法 =&gt; 程序 =&gt; ISA指令集 =&gt; 微结构 =&gt; 电路 =&gt; 器件<br>把问题转换成算法，算法不像人类语言那样具有歧义性，而且算法都可以被计算，且计算会被终止。之后算法会被转换成程序语言。程序经编译器转换成ISA指令集,也就是计算机可以执行的指令集合。实现指令集的具体组织被称为微结构，例如在驾驶汽车中，一个从A点移动到B点的指令就需要油门，刹车等结构来实现。微结构的功能使用逻辑电路实现的，而每个逻辑电路的实现需要对应的电子器件来组合电路。</p><h2 id="二、Bit、数据类型及其运算"><a href="#二、Bit、数据类型及其运算" class="headerlink" title="二、Bit、数据类型及其运算"></a>二、Bit、数据类型及其运算</h2><p>Bit可以为1，也可以为0，在电路中使用有无电压来表示。一个字节有八个比特位，可以表示256种状态。所有的ASCII码都能够使用一个字节来表示，两个字节就可以表示出汉字国际码。<br>定义了数字之后，还定义了它的操作方式，这可以定义为一种数据类型。我们可以用k个比特位来表示2^k个无符号整数（从0到2^k-1）对于有符号整数，可以使用正数补码的形式来表示负数，k个比特位可以定义的范围从-2^(k-1)到2^(k-1)-1<br>比特的算术运算有加法与减法，规则为二进制运算，需要考虑溢出问题。<br>比特的逻辑运算有与，或，非，异或运算<br>除了整数类型，还有位矢量数据类型，浮点数数据类型，ASCII码</p><h2 id="三、数字逻辑"><a href="#三、数字逻辑" class="headerlink" title="三、数字逻辑"></a>三、数字逻辑</h2><p>晶体管可以根据电压来控制线路的开闭，n型MOS管在输入为2.9V的时候导通，在0V的时候断开，p型MOS刚好相反。利用n型MOS管与p型MOS管，构建一个电路，使得电路中输入为2.9V的时候，某一点上电压为0，输入为0V的时候，该点电压为2.9V，这样子就构建出了一个非门，与此相似，可以构建出与门、或门、或非门、与或门，它们统称为逻辑门。<br>利用逻辑门，构建译码器，当译码器有n个输入的时候，就会有2^n个输出，用来解释二进制数。<br>利用逻辑门，构建多路复用器，会有2^n个输入，一个输出，用来从多个输入中选择一个。<br>利用逻辑门，构建全加器，实现二进制的加法计算。<br>利用逻辑门，构建寄存器，实现对数据的存储。</p><h2 id="四、冯·诺伊曼模型"><a href="#四、冯·诺伊曼模型" class="headerlink" title="四、冯·诺伊曼模型"></a>四、冯·诺伊曼模型</h2>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;一、计算机系统概述&quot;&gt;&lt;a href=&quot;#一、计算机系统概述&quot; class=&quot;headerlink&quot; title=&quot;一、计算机系统概述&quot;&gt;&lt;/a&gt;一、计算机系统概述&lt;/h3&gt;&lt;p&gt;计算机只是一个电子器件，它只能根据用户的知道来完成任务。&lt;br&gt;计算机系统是一个庞大的系统，我们可以抽象地去了解整个系统，通常我们可以把它视为一个图灵机(图灵机是一个黑盒，只需要用户输入操作，在图灵机中完成操作，最后输出结果)，经常我们不需要理解图灵机内部是如何实现。计算机也可以视为是一个通用图灵机（一个可通过编程模式实现任意图灵机的图灵机）。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机系统" scheme="https://peixinhuang.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="计算机系统" scheme="https://peixinhuang.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Csharp调用Lua</title>
    <link href="https://peixinhuang.github.io/2022/07/17/%E7%BC%96%E7%A8%8B/Lua/Csharp%E8%B0%83%E7%94%A8Lua/"/>
    <id>https://peixinhuang.github.io/2022/07/17/%E7%BC%96%E7%A8%8B/Lua/Csharp%E8%B0%83%E7%94%A8Lua/</id>
    <published>2022-07-17T10:38:39.000Z</published>
    <updated>2022-07-17T16:06:56.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Csharp调用Lua（unity）"><a href="#Csharp调用Lua（unity）" class="headerlink" title="Csharp调用Lua（unity）"></a>Csharp调用Lua（unity）<span id="more"></span></h1><h2 id="一、新建一个类-用于管理Lua虚拟机"><a href="#一、新建一个类-用于管理Lua虚拟机" class="headerlink" title="一、新建一个类,用于管理Lua虚拟机"></a>一、新建一个类,用于管理Lua虚拟机</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> XLua;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LuaManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LuaEnv luaEnv = <span class="keyword">new</span> LuaEnv();    </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取Lua对象</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>Lua对象<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LuaEnv <span class="title">GetInstance</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (luaEnv <span class="keyword">is</span> <span class="literal">null</span>)</span><br><span class="line">            luaEnv = <span class="keyword">new</span> LuaEnv();</span><br><span class="line">        <span class="keyword">return</span> luaEnv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="二、编写Lua文件-LuaModule-lua-txt"><a href="#二、编写Lua文件-LuaModule-lua-txt" class="headerlink" title="二、编写Lua文件(LuaModule.lua.txt)"></a>二、编写Lua文件(LuaModule.lua.txt)</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">num1 = <span class="number">10</span></span><br><span class="line">str1 = <span class="string">&#x27;this is a lua string&#x27;</span></span><br><span class="line">table1 = &#123;</span><br><span class="line">name = <span class="string">&quot;alan&quot;</span>,</span><br><span class="line"><span class="string">&quot;green&quot;</span>,</span><br><span class="line"><span class="string">&quot;blue&quot;</span>,</span><br><span class="line"><span class="string">&quot;yellow&quot;</span>,</span><br><span class="line">age = <span class="number">8</span>,</span><br><span class="line">mm = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;this is lua table&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">table1.fun1</span><span class="params">(self)</span></span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">self</span>.name,<span class="built_in">self</span>.age)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">table1.fun2</span><span class="params">(self,num1,num2)</span></span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">self</span>.name,<span class="built_in">self</span>.age)</span><br><span class="line"><span class="built_in">print</span>(num1 + num2)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span><span class="params">()</span></span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;this is a LuaGlobbalFunc&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func2</span><span class="params">(x,y)</span></span></span><br><span class="line"><span class="built_in">print</span>(x+y)</span><br><span class="line"><span class="keyword">return</span> (x+y)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func3</span><span class="params">(x,y)</span></span></span><br><span class="line"><span class="keyword">return</span> x*y,x*x,y*y</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="三、C-中调用lua变量"><a href="#三、C-中调用lua变量" class="headerlink" title="三、C#中调用lua变量"></a>三、C#中调用lua变量</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> XLua;</span><br><span class="line"></span><br><span class="line">[<span class="meta">CSharpCallLua</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPerson</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> name &#123; <span class="keyword">set</span>; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="built_in">string</span> age &#123; <span class="keyword">set</span>; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mm</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fun1</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fun2</span>(<span class="params"><span class="built_in">int</span> num1,<span class="built_in">int</span> num2</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIManager</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> TextAsset textAsset;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyCustomDelegate1</span>()</span>; <span class="comment">//自定义一个依赖</span></span><br><span class="line"></span><br><span class="line">    [<span class="meta">CSharpCallLua</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">MyCustomDelegate2</span>(<span class="params"><span class="built_in">int</span> num1,<span class="built_in">int</span> num2</span>)</span>; <span class="comment">//自定义一个带参数的依赖 </span></span><br><span class="line"></span><br><span class="line">    [<span class="meta">CSharpCallLua</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">MyCustomDelegate3</span>(<span class="params"><span class="built_in">int</span> num1, <span class="built_in">int</span> num2,<span class="keyword">out</span> <span class="built_in">int</span> result2,<span class="keyword">out</span> <span class="built_in">int</span> result3 </span>)</span>; <span class="comment">//自定义一个依赖 </span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取lua文件</span></span><br><span class="line">        LuaManager.GetInstance().DoString(textAsset.text);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取lua中的变量</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//映射lua变量到C#中的基本数据类型</span></span><br><span class="line">        <span class="built_in">int</span> num1 = LuaManager.GetInstance().Global.Get&lt;<span class="built_in">int</span>&gt;(<span class="string">&quot;num1&quot;</span>); <span class="comment">//修改C#中的变量，不会对Lua中的变量产生影响</span></span><br><span class="line">        <span class="built_in">string</span> str1 = LuaManager.GetInstance().Global.Get&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;str1&quot;</span>); <span class="comment">//修改C#中的变量，不会对Lua中的变量产生影响</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//映射lua中的table变量到C#中的类变量</span></span><br><span class="line">        Person person = LuaManager.GetInstance().Global.Get&lt;Person&gt;(<span class="string">&quot;table1&quot;</span>); <span class="comment">//使用类的方式是深拷贝，C#中的变量不会影响lua中的变量</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//映射lua中的table变量到C#中的接口类型变量</span></span><br><span class="line">        IPerson iperson = LuaManager.GetInstance().Global.Get&lt;IPerson&gt;(<span class="string">&quot;table1&quot;</span>); <span class="comment">//使用接口的方式是浅拷贝，C#中的变量影响lua中的变量</span></span><br><span class="line">        <span class="comment">//iperson.fun1(); //调用lua中table的函数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//映射lua中的table键值对到C#中的字典中</span></span><br><span class="line">        Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt; dict1 = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;();</span><br><span class="line">        dict1 = LuaManager.GetInstance().Global.Get&lt;Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;&gt;(<span class="string">&quot;table1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//映射lua中的table变量(没有设置键值对的)到C#中的字典中</span></span><br><span class="line">        List&lt;<span class="built_in">object</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">object</span>&gt;();</span><br><span class="line">        list = LuaManager.GetInstance().Global.Get&lt;List&lt;<span class="built_in">object</span>&gt;&gt;(<span class="string">&quot;table1&quot;</span>);</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改lua中的变量</span></span><br><span class="line">        LuaManager.GetInstance().Global.Set&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;(<span class="string">&quot;num1&quot;</span>, <span class="number">99</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用Lua中的公共函数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//映射Lua中的函数到Action上</span></span><br><span class="line">        Action action = LuaManager.GetInstance().Global.Get&lt;Action&gt;(<span class="string">&quot;func1&quot;</span>);</span><br><span class="line">        <span class="comment">//action();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//映射Lua中的函数到自定义依赖上</span></span><br><span class="line">        MyCustomDelegate1 myCustomDelegate1 = LuaManager.GetInstance().Global.Get&lt;MyCustomDelegate1&gt;(<span class="string">&quot;func1&quot;</span>);</span><br><span class="line">        <span class="comment">//myCustomDelegate1(); //调用自定义依赖函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//映射Lua中的函数(带参数与返回值)到自定义依赖上</span></span><br><span class="line">        MyCustomDelegate2 myCustomDelegate2 = LuaManager.GetInstance().Global.Get&lt;MyCustomDelegate2&gt;(<span class="string">&quot;func2&quot;</span>);</span><br><span class="line">        <span class="comment">//int result = myCustomDelegate2(10, 20); //调用自定义依赖函数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//映射Lua中的函数(多个返回值)到自定义依赖上</span></span><br><span class="line">        MyCustomDelegate3 myCustomDelegate3 = LuaManager.GetInstance().Global.Get&lt;MyCustomDelegate3&gt;(<span class="string">&quot;func3&quot;</span>);</span><br><span class="line">        <span class="comment">//int result2 = 0;</span></span><br><span class="line">        <span class="comment">//int result3 = 0;</span></span><br><span class="line">        <span class="comment">//int result1 = myCustomDelegate3(10, 20,out result2,out result3);</span></span><br><span class="line">        <span class="comment">//Debug.Log(result1 + &quot;,&quot; + result2 + &quot;,&quot; + result3);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Csharp调用Lua（unity）&quot;&gt;&lt;a href=&quot;#Csharp调用Lua（unity）&quot; class=&quot;headerlink&quot; title=&quot;Csharp调用Lua（unity）&quot;&gt;&lt;/a&gt;Csharp调用Lua（unity）</summary>
    
    
    
    <category term="编程" scheme="https://peixinhuang.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Lua" scheme="https://peixinhuang.github.io/categories/%E7%BC%96%E7%A8%8B/Lua/"/>
    
    
    <category term="Lua" scheme="https://peixinhuang.github.io/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>Lua调用Csharp</title>
    <link href="https://peixinhuang.github.io/2022/07/17/%E7%BC%96%E7%A8%8B/Lua/Lua%E8%B0%83%E7%94%A8Csharp/"/>
    <id>https://peixinhuang.github.io/2022/07/17/%E7%BC%96%E7%A8%8B/Lua/Lua%E8%B0%83%E7%94%A8Csharp/</id>
    <published>2022-07-17T10:38:39.000Z</published>
    <updated>2022-07-17T16:07:37.724Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lua调用Csharp（unity）"><a href="#Lua调用Csharp（unity）" class="headerlink" title="Lua调用Csharp（unity）"></a>Lua调用Csharp（unity）</h1><h2 id="一、新建一个类-用于管理Lua虚拟机"><a href="#一、新建一个类-用于管理Lua虚拟机" class="headerlink" title="一、新建一个类,用于管理Lua虚拟机"></a>一、新建一个类,用于管理Lua虚拟机</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> XLua;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LuaManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LuaEnv luaEnv = <span class="keyword">new</span> LuaEnv();    </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取Lua对象</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>Lua对象<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LuaEnv <span class="title">GetInstance</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (luaEnv <span class="keyword">is</span> <span class="literal">null</span>)</span><br><span class="line">            luaEnv = <span class="keyword">new</span> LuaEnv();</span><br><span class="line">        <span class="keyword">return</span> luaEnv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><hr><h2 id="二、编写Lua文件-LuaModule2-lua-txt"><a href="#二、编写Lua文件-LuaModule2-lua-txt" class="headerlink" title="二、编写Lua文件(LuaModule2.lua.txt)"></a>二、编写Lua文件(LuaModule2.lua.txt)</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 打印文字</span></span><br><span class="line">CS.UnityEngine.Debug.Log(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建对象</span></span><br><span class="line"><span class="keyword">local</span> obj = CS.UnityEngine.GameObject();</span><br><span class="line">obj.name = <span class="string">&quot;Alan&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查找对象及对象上的组件</span></span><br><span class="line"><span class="keyword">local</span> obj2 = CS.UnityEngine.GameObject.Find(<span class="string">&quot;Directional Light&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> light = obj2:GetComponent(<span class="string">&quot;Light&quot;</span>)</span><br><span class="line">CS.UnityEngine.GameObject.Destroy(light)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Lua加载Prefab</span></span><br><span class="line"><span class="keyword">local</span> csue = CS.UnityEngine   <span class="comment">-- 简写</span></span><br><span class="line"><span class="keyword">local</span> obj3 = csue.Resources.Load(<span class="string">&quot;Cube&quot;</span>);</span><br><span class="line">csue.GameObject.Instantiate(obj3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Lua实现Start函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">luaStart</span><span class="params">()</span></span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;this is  luaStart function&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">luaAwake</span><span class="params">()</span></span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;this is  luaAwake function&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">luaUpdate</span><span class="params">()</span></span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;this is  luaUpdate function&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> r = CS.UnityEngine.Vector3.up * CS.UnityEngine.Time.deltaTime * <span class="number">100</span></span><br><span class="line"><span class="built_in">self</span>.transform:Rotate(r) <span class="comment">-- 通过self操作游戏对象</span></span><br><span class="line">n1.transform.position = CS.UnityEngine.Vector3(<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>) <span class="comment">-- 通过名称操作游戏对象</span></span><br><span class="line">n2.transform.position = CS.UnityEngine.Vector3(<span class="number">10</span>,<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">luaOnDestroy</span><span class="params">()</span></span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;this is  luaOnDestroy function&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Lua操作UI</span></span><br><span class="line"><span class="comment">--GetComponent&lt;Button&gt;().onClick.AddListener();</span></span><br><span class="line">btn:GetComponent(<span class="string">&quot;Button&quot;</span>).onClick:AddListener(</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">local</span> <span class="built_in">input</span> = inputField:GetComponent(<span class="string">&quot;InputField&quot;</span>)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">input</span>.text ~= <span class="string">&quot;&quot;</span>) <span class="keyword">then</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>.text)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;empty&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="三、C-文件"><a href="#三、C-文件" class="headerlink" title="三、C#文件"></a>三、C#文件</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> XLua;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LuaCsharp</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> TextAsset textAsset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CMyClass[] lists; <span class="comment">//需要被lua操作的游戏对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LuaTable luaTable; <span class="comment">//表对象</span></span><br><span class="line"></span><br><span class="line">    Action _luaStart;</span><br><span class="line">    Action _luaAwake;</span><br><span class="line">    Action _luaUpdate;</span><br><span class="line">    Action _luaDestroy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//为普通表设置元表</span></span><br><span class="line">        luaTable = LuaManager.GetInstance().NewTable(); <span class="comment">//实现普通表</span></span><br><span class="line">        LuaTable metaTable = LuaManager.GetInstance().NewTable(); <span class="comment">//元表</span></span><br><span class="line">        metaTable.Set(<span class="string">&quot;__index&quot;</span>, LuaManager.GetInstance().Global);</span><br><span class="line">        luaTable.SetMetaTable(metaTable);</span><br><span class="line">        metaTable.Dispose();</span><br><span class="line"></span><br><span class="line">        luaTable.Set(<span class="string">&quot;self&quot;</span>, <span class="keyword">this</span>); <span class="comment">//把self绑定到this上</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定游戏对象到lua内部</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; lists.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            luaTable.Set(lists[i].name, lists[i].go);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//读取lua文件</span></span><br><span class="line">        <span class="comment">//LuaManager.GetInstance().DoString(textAsset.text); </span></span><br><span class="line">        LuaManager.GetInstance().DoString(textAsset.text, <span class="string">&quot;LuaModule2.lua&quot;</span>, luaTable);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定lua Awake函数到C# Awake函数</span></span><br><span class="line">        _luaAwake = LuaManager.GetInstance().Global.Get&lt;Action&gt;(<span class="string">&quot;luaAwake&quot;</span>); </span><br><span class="line"></span><br><span class="line">        _luaStart = luaTable.Get&lt;Action&gt;(<span class="string">&quot;luaStart&quot;</span>); </span><br><span class="line">        _luaUpdate = luaTable.Get&lt;Action&gt;(<span class="string">&quot;luaUpdate&quot;</span>); </span><br><span class="line">        _luaDestroy = luaTable.Get&lt;Action&gt;(<span class="string">&quot;luaOnDestroy&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(_luaAwake != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _luaAwake();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(_luaStart != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _luaStart();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_luaUpdate != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            LuaManager.GetInstance().Tick();</span><br><span class="line">            _luaUpdate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDestroy</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_luaDestroy != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _luaDestroy();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CMyClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> GameObject go;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Lua调用Csharp（unity）&quot;&gt;&lt;a href=&quot;#Lua调用Csharp（unity）&quot; class=&quot;headerlink&quot; title=&quot;Lua调用Csharp（unity）&quot;&gt;&lt;/a&gt;Lua调用Csharp（unity）&lt;/h1&gt;&lt;h2 id=&quot;一、新建一个类-用于管理Lua虚拟机&quot;&gt;&lt;a href=&quot;#一、新建一个类-用于管理Lua虚拟机&quot; class=&quot;headerlink&quot; title=&quot;一、新建一个类,用于管理Lua虚拟机&quot;&gt;&lt;/a&gt;一、新建一个类,用于管理Lua虚拟机&lt;/h2&gt;&lt;figure class=&quot;highlight c#&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; System;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; System.Collections;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; System.Collections.Generic;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; UnityEngine;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; XLua;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LuaManager&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; LuaEnv luaEnv = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LuaEnv();    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;doctag&quot;&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;doctag&quot;&gt;///&lt;/span&gt; 获取Lua对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;doctag&quot;&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;doctag&quot;&gt;///&lt;/span&gt; &lt;span class=&quot;doctag&quot;&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;Lua对象&lt;span class=&quot;doctag&quot;&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; LuaEnv &lt;span class=&quot;title&quot;&gt;GetInstance&lt;/span&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (luaEnv &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            luaEnv = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LuaEnv();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; luaEnv;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="编程" scheme="https://peixinhuang.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Lua" scheme="https://peixinhuang.github.io/categories/%E7%BC%96%E7%A8%8B/Lua/"/>
    
    
    <category term="Lua" scheme="https://peixinhuang.github.io/tags/Lua/"/>
    
  </entry>
  
</feed>
